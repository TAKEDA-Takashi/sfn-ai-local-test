name: Release Process

# このワークフローは、mainブランチへのPRがマージされた時に実行されます
# リリースPRでpackage.jsonのバージョンが更新されている場合、
# 自動的にタグを作成してGitHubリリースを作成します
# 
# 重要: タグプッシュで "Publish to npm" ワークフローをトリガーするために
# RELEASE_PAT (Personal Access Token) をSecretに設定する必要があります

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    # PRがマージされた時のみ実行
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全履歴を取得（タグ作成に必要）
          # Personal Access Tokenを使用（他のワークフローをトリガーするため）
          token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check for version change
        id: version
        run: |
          # PRのベースブランチ（マージ前のmain）とのバージョン比較
          # マージコミットの親コミット（^1）を使用してマージ前の状態を取得
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # マージコミットの場合、最初の親（マージ前のmain）のバージョンを取得
          if git rev-parse HEAD^2 >/dev/null 2>&1; then
            # これはマージコミット
            BASE_VERSION=$(git show HEAD^1:package.json | grep '"version"' | cut -d'"' -f4)
          else
            # 通常のコミット（fallback）
            BASE_VERSION=$(git show HEAD^:package.json 2>/dev/null | grep '"version"' | cut -d'"' -f4 || echo "")
          fi
          
          echo "Base version: $BASE_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$BASE_VERSION" != "$CURRENT_VERSION" ] && [ -n "$CURRENT_VERSION" ]; then
            echo "Version changed from $BASE_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No version change detected. Skipping release."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag
        if: steps.version.outputs.changed == 'true'
        run: |
          git tag ${{ steps.version.outputs.version }}
          echo "Tag ${{ steps.version.outputs.version }} created"
          
      - name: Push tag
        if: steps.version.outputs.changed == 'true'
        run: |
          git push origin --tags

      - name: Create GitHub Release
        if: steps.version.outputs.changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in this release
            ${{ github.event.pull_request.body }}
            
            ---
            *Released by GitHub Actions*
          draft: false
          prerelease: false